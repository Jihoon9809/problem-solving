#include <iostream>
#include <queue>
#include <string>

using namespace std;

string board[1001];
int dist1[1001][1001];
int dist2[1001][1001];
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };


int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	int r, c, max= 0;
	cin >> r >> c;

	for (int i = 0; i < r; i++) {
		cin >> board[i];
	}
	//cout << board[2][2];
	queue <pair<int, int>> q1;
	queue <pair<int, int>> q2;

	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			if (board[i][j] == '#') {
				dist1[i][j] = 1;
				dist2[i][j] = 1;
			}
			else if (board[i][j] == 'J') {
				q1.push({ i,j });
			}
			else if (board[i][j] == 'F') {
				q2.push({ i,j });
			}
			else {
				dist1[i][j] = -1;
				dist2[i][j] = -1;
			}
		}
	}
	
	
	while (!q2.empty()) {
		pair<int, int > cur = q2.front();
		q2.pop();
		for (int i = 0; i < 4; i++) {
			int nx = dx[i] + cur.first;
			int ny = dy[i] + cur.second;
			if (nx >= r || nx < 0 || ny >= c || ny < 0) continue;
			if (dist2[nx][ny] >= 0) continue;
			dist2[nx][ny] = dist2[cur.first][cur.second] + 1;
			q2.push({ nx,ny });
			//cout << dist2[nx][ny];
		}
	}
	
	while (!q1.empty()) {
		pair<int, int > cur = q1.front();
		q1.pop();
		if (max < dist1[cur.first][cur.second]) max = dist1[cur.first][cur.second];

		for (int i = 0; i < 4; i++) {
			int nx = dx[i] + cur.first;
			int ny = dy[i] + cur.second;
			if (nx >= r || nx < 0 || ny >= c || ny < 0) {
				cout << dist1[cur.first][cur.second] + 1;
				return 0;
			}
			if (dist1[nx][ny] >= 0) continue;
			if (dist1[nx][ny] != -1 ||dist1[cur.first][cur.second]+1 >= dist2[nx][ny]) continue;
			dist1[nx][ny] = dist1[cur.first][cur.second] + 1;
			q1.push({ nx,ny });
			//cout << dist1[nx][ny];
		}
	}
	if (max == 0) cout << "IMPOSSIBLE";
}

//////////////////////// #을 1로 바꾸지 않고 board[][]의 값이 #일 경우 continue로 변경하였다.
////////////////////////////////////////////////////



#include <iostream>
#include <queue>
#include <string>

using namespace std;

string board[1001];
int dist1[1001][1001];
int dist2[1001][1001];
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };


int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	int r, c;
	cin >> r >> c;

	for (int i = 0; i < r; i++) {
		cin >> board[i];
	}
	//cout << board[2][2];
	queue <pair<int, int>> q1;
	queue <pair<int, int>> q2;

	for (int i = 0; i < r; i++) {
		for (int j = 0; j < c; j++) {
			 if (board[i][j] == 'J') {
				q1.push({ i,j });
				dist1[i][j] = 0;
			}
			else if (board[i][j] == 'F') {
				q2.push({ i,j });
				dist2[i][j] = 0;
			}
			else {
				dist1[i][j] = -1;
				dist2[i][j] = -1;
			}
		}
	}
	
	while (!q2.empty()) {
		pair<int, int > cur = q2.front();
		q2.pop();

		for (int i = 0; i < 4; i++) {
			int nx = dx[i] + cur.first;
			int ny = dy[i] + cur.second;
			if (nx >= r || nx < 0 || ny >= c || ny < 0) continue;
			if (dist2[nx][ny] >= 0 || board[nx][ny] == '#') continue;
			dist2[nx][ny] = dist2[cur.first][cur.second] + 1;
			q2.push({ nx,ny });
			//cout << dist2[nx][ny];
		}
	}
	
	while (!q1.empty()) {
		pair<int, int > cur = q1.front();
		q1.pop();

		for (int i = 0; i < 4; i++) {
			int nx = dx[i] + cur.first;
			int ny = dy[i] + cur.second;
			if (nx >= r || nx < 0 || ny >= c || ny < 0) {
				cout << dist1[cur.first][cur.second] + 1;
				return 0;
			}
			if (dist1[nx][ny] >= 0 || board[nx][ny] == '#') continue;
			if (dist1[cur.first][cur.second]+1 >= dist2[nx][ny] && dist2[nx][ny] != -1) continue;
			dist1[nx][ny] = dist1[cur.first][cur.second] + 1;
			q1.push({ nx,ny });
			//cout << dist1[nx][ny];
		}
	}
	cout << "IMPOSSIBLE";
}
