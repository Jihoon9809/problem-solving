#include <iostream>

using namespace std;

int board[2200][2200];
int res[3];

bool find(int row, int col, int n) {
	
	int start = board[row][col];

	for (int i = row; i < row+n; i++) {
		for (int j = col; j < col+n; j++) {
			if (board[i][j] != start) return false;
		}
	}
	return true;
}
void divide(int row, int col, int n) {
	// 체크 ture res[board[i][j]+1] ++;

		// 체크 false --> 나누기.
		
	if (find(row, col, n)) {
		res[board[row][col] + 1]++;
		return;
	}
				else {
					int size = n / 3;
					
					for (int i = 0; i < 3; i++) {
						for (int j = 0; j < 3; j++) {
							divide(row + size * i, col + size * j, size);
						}
					}
				}
}

int main() {
	int n;
	cin >> n;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> board[i][j];
		}
	}

	divide(0, 0, n);
	cout << res[0] << "\n" << res[1] << "\n" << res[2];
}



board배열의 크기를 3의n승 만큼 잡았다.
처음 재귀함수를 어떻게 풀면 좋을지 절차식으로 풀다 너무 오래 걸렸다.

우선 divide의 체크를 통해 res의 결과를 증감 시킨다.
res[board[i][j]+1로 -1,0,1의 값들을 1씩 증가하여 사용한다.

board의 전체를 체크 한후 성공하면 리턴, 실패하면 n/3을 size변수에 대입하였다. n/3을 한 이유는 3의 배수이기 때문에 3x3형태로 영역을 나눌 수 있어서 이다.
이후 i행에 row + i번째 *(n/3)/ col + j번째 *(n/3)을 하여 divide(row,col,size)함수를 다시 호출한다.

find함수는 아래 divide에서 전달받은 인자를 활용하여, bool(참,거짓)을 판단한ㄷㅏ.

위 과정을 반복하여 -1,0,1의 개수를 파악한다. 
