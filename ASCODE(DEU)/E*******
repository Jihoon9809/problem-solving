#include <iostream>
#include <algorithm>
#include <math.h>
#include <tuple>
#include <vector>

using namespace std;

pair<int, int> arr[20002];
//tuple<pair<int, int>, pair<int, int>, int> t0[2];
tuple<int, int, int> t1[2];
tuple<int, int, int> t2[2];

vector<tuple<int, int, int>> res;

pair<int, int> p;

int n;
// 두 점 사이의 거리 : sqrt(pow(x1-x2) + pow(y1-y2),2);

int compare(pair<int, int> a, pair<int, int> b) {
	return a.second < b.second;
}

int res_compare(tuple<int, int,int > a, tuple<int,int, int> b) {
	return get<2>(a) < get<2>(b);
}

int closest(int st, int ed, int min_d) {
	sort(arr, arr + n, compare); // y축으로 재 정렬.

	for (int i = st; i < ed+1; i++) { // st=0 ed=4 ->. 0-> 1234 1->234 2->34 3->4 4->4 //i <= ed 할 경우 같은 값 비교함. 에러.
		for (int j = i + 1; j < ed+1; j++) {
			if (arr[j].second - arr[i].second > min_d) break; // y축 기준으로 정렬 되어있으므로 해당 i값의 j랑 비교 의미 x

			int temp = sqrt(pow(arr[i].first - arr[j].first, 2) + pow(arr[i].second - arr[j].second, 2));
			min_d = min(min_d, temp);
			if (min_d == temp) {
				res.push_back({ arr[i].first, arr[i].second, min_d });
				res.push_back({ arr[j].first, arr[j].second, min_d });
			}
		}

	}
	return min_d;
}

int func(int st,int ed) {
	int point = ed - st +1; // func (0, 2) // 0,1,2 --> plus +1
	
	if (point == 2) {
		int dist = sqrt(pow(arr[st].first - arr[ed].first, 2) + pow(arr[st].second - arr[ed].second, 2));
//		t0[0] = { arr[st],arr[st + 1],dist };
		t1[0] = {arr[st].first, arr[st].second , dist};
		t1[1] = { arr[st].first, arr[st].second, dist };
		return dist;
	}
	else if (point == 3) {
	int p1 = sqrt(pow(arr[st].first - arr[st+1].first, 2) + pow(arr[st].second - arr[st+1].second, 2)); // 첫번째 점 , 두번째 점 거리
	int p2 = sqrt(pow(arr[st].first - arr[st+2].first, 2) + pow(arr[st].second - arr[st+2].second, 2)); // 첫번째 점 , 세번째 점 거리
	int p3 = sqrt(pow(arr[st+1].first - arr[st+2].first, 2) + pow(arr[st+1].second - arr[st+2].second, 2)); // 두번째 점 , 세번째 점 거리
	if (min({p1,p2,p3}) == p1) {
		t2[0] = {arr[st].first, arr[st].second , p1};
		t2[1] = { arr[st+1].first, arr[st+1].second , p1 };
		return min({ p1, p2, p3 });
	}
	else if(min({p1,p2,p3}) == p2){
		t1[0] = {arr[st].first, arr[st].second , p2};
		t1[1] = { arr[st+2].first, arr[st+2].second , p2 };
		return min({ p1, p2, p3 });
	}
	else if (min({ p1,p2,p3 }) == p3) {
		t1[0] = {arr[st + 1].first, arr[st + 1].second , p3};
		t1[1] = { arr[st+2].first, arr[st+2].second , p3 };
		return min({ p1, p2, p3 });
	}
	//return min({ p1, p2, p3 }); // min({1,2,3})--> // o min({1,2},3)--> x
	}

	else {
		int mid = (st + ed)/2; // func(st, (st+ed)/2)로 설정 하면 무한 루프 빠짐.
		int min_st = func(st, mid); //ex 0,2
		int min_ed = func(mid + 1, ed); //ex 4,6
		int min_d = min(min_st, min_ed);
		if (min_d == min_st) {
			res.push_back({ get<0>(t1[0]), get<1>(t1[0]), min_d });
			res.push_back({ get<0>(t1[1]), get<1>(t1[1]), min_d });
		}
		else {
			res.push_back({ get<0>(t2[0]), get<1>(t2[0]), min_d });
			res.push_back({ get<0>(t2[1]), get<1>(t2[1]), min_d });
		}
		return closest(st,ed,min_d);
	}

}






int main() {
	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> arr[i].first >> arr[i].second;
	}
	//sort(arr, arr + n);
	//cout << "'''''''''''''''" << "\n";
	//for (int i = 0; i < n; i++) cout << arr[i].first << " " << arr[i].second << "\n";
	
	
	//sort(arr, arr + n, compare);

	func(0,n-1);
	sort(res.begin(), res.end(), res_compare);

	
	

//	cout << "'''''''''''''''" << "\n";
//	for (int i = 0; i < n; i++) cout << arr[i].first << " " << arr[i].second << "\n";

//	cout << "(" << get<0>(res[2]) << ", " << get<1>(res[2]) << ") " << "(" << get<0>(res[3]) << ", " << get<1>(res[3]) << ")";
	for (auto a : res) cout << get<0>(a) << " " << get<1>(a) << " " << get<2>(a) << "\n";
//	cout << "\n";
//	for (auto a : res) cout << get<2>(a) << " ";
	
}



/////////////////////////////////////////// 여러번 실패

#include <iostream>
#include <algorithm>
#include <math.h>
#include <tuple>
#include <vector>

using namespace std;

pair<int, int> arr[20002];
//tuple<pair<int, int>, pair<int, int>, int> t0[2];
tuple<int, int, int,int, int> t;
tuple<int, int, int,int, int> l_t;
tuple<int, int, int,int, int> r_t;

vector<tuple<int, int, int,int,int>> res;

int n;
// 두 점 사이의 거리 : sqrt(pow(x1-x2) + pow(y1-y2),2);

int compare(pair<int, int> a, pair<int, int> b) {
	return a.second < b.second;
}

int res_compare(tuple<int, int,int,int,int > a, tuple<int,int,int,int, int> b) {
	return get<4>(a) < get<4>(b);
}

int closest(int st, int ed, int min_d) {
	sort(arr, arr + n, compare); // y축으로 재 정렬.

	for (int i = st; i < ed+1; i++) { // st=0 ed=4 ->. 0-> 1234 1->234 2->34 3->4 4->4 //i <= ed 할 경우 같은 값 비교함. 에러.
		for (int j = i + 1; j < ed+1; j++) {
			if (arr[j].first - arr[i].first > min_d) break; // y축 기준으로 정렬 되어있으므로 해당 i값의 j랑 비교 의미 x

			int temp = sqrt(pow(arr[i].first - arr[j].first, 2) + pow(arr[i].second - arr[j].second, 2));
			min_d = min(min_d, temp);
			
			if (min_d == temp) {
				res.push_back(make_tuple( arr[i].first, arr[i].second, arr[j].first, arr[j].second, temp ));
			}
		}

	}
	return min_d;
}


int func(int st,int ed) {
	int point = ed - st +1; // func (0, 2) // 0,1,2 --> plus +1
	
	if (point == 2) {
		int dist = sqrt(pow(arr[st].first - arr[ed].first, 2) + pow(arr[st].second - arr[ed].second, 2));
		t = make_tuple(arr[st].first,arr[st].second,arr[st+1].first,arr[st+1].second,dist);
		return get<4>(t);
	}
	else if (point == 3) {
	int p1 = sqrt(pow(arr[st].first - arr[st+1].first, 2) + pow(arr[st].second - arr[st+1].second, 2)); // 첫번째 점 , 두번째 점 거리
	int p2 = sqrt(pow(arr[st].first - arr[st+2].first, 2) + pow(arr[st].second - arr[st+2].second, 2)); // 첫번째 점 , 세번째 점 거리
	int p3 = sqrt(pow(arr[st+1].first - arr[st+2].first, 2) + pow(arr[st+1].second - arr[st+2].second, 2)); // 두번째 점 , 세번째 점 거리

	if (min({p1,p2,p3}) == p1) {
		t = make_tuple( arr[st].first,arr[st].second,arr[st + 1].first,arr[st + 1].second, p1 );
		
		return min({ p1, p2, p3 });
	}
	else if(min({p1,p2,p3}) == p2){
		t = make_tuple( arr[st].first,arr[st].second,arr[st + 1].first,arr[st + 1].second, p2);

		return min({ p1, p2, p3 });
	}
	else if (min({ p1,p2,p3 }) == p3) {
		t = make_tuple( arr[st].first,arr[st].second,arr[st + 1].first,arr[st + 1].second, p2 );

		return min({ p1, p2, p3 });
	}
	//return min({ p1, p2, p3 }); // min({1,2,3})--> // o min({1,2},3)--> x
	}

	else {
		int mid = (st + ed)/2; // func(st, (st+ed)/2)로 설정 하면 무한 루프 빠짐.
		int min_st = func(st, mid); //ex 0,2
		l_t = make_tuple( get<0>(t),get<1>(t),get<2>(t),get<3>(t),get<4>(t) );
		int min_ed = func(mid + 1, ed); //ex 4,6
		r_t = make_tuple( get<0>(t),get<1>(t),get<2>(t),get<3>(t),get<4>(t) );
		
		int min_d = min(min_st, min_ed);

		if (min_d == min_st) {
			res.push_back(make_tuple( get<0>(l_t),get<1>(l_t),get<2>(l_t),get<3>(l_t),get<4>(l_t) ));
		}
		else {
			res.push_back(make_tuple( get<0>(r_t),get<1>(r_t),get<2>(r_t),get<3>(r_t),get<4>(r_t) ));
		}

		return closest(st,ed,min_d);
	}

}






int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> arr[i].first >> arr[i].second;
	}
	//sort(arr, arr + n);
	//cout << "'''''''''''''''" << "\n";
	//for (int i = 0; i < n; i++) cout << arr[i].first << " " << arr[i].second << "\n";
	
	
	//sort(arr, arr + n, compare);

	func(0,n-1);
	sort(res.begin(), res.end(), res_compare);

	
	cout << "(" << get<0>(res[0]) << ", " << get<1>(res[0]) << ") " << "(" << get<2>(res[0]) << ", " << get<3>(res[0]) << ") " << "\n";

//	cout << "'''''''''''''''" << "\n";
//	for (int i = 0; i < n; i++) cout << arr[i].first << " " << arr[i].second << "\n";

/*	for (int i = 0; i < res.size(); i++) {
		cout << "(" << get<0>(res[i]) << ", " << get<1>(res[i]) << ") " << "(" << get<2>(res[i]) << ", " << get<3>(res[i]) << ") " << get<4>(res[i]) << "\n";
	} */

//	for (auto a : res) cout << get<4>(a) << "\n";
//	cout << "\n";
//	for (auto a : res) cout << get<2>(a) << " ";
	
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 x 좌표의 값이 작은 좌표를 먼저 출력하고, 만약 x 좌표의 값이 같을 경우에는 y 좌표값이 작은 것을 먼저 출력한다
 --> x (100,71) (100, 16) 일경우 (100,16) (100,71) 말 인거 같은데 틀림. 
 솔찍히 어디서 틀린지 아직 모르겟따.......
 
 
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

struct Point {
    long long x;
    long long y;

    bool operator < (const Point& b) const { //구조체를 사용하여 정렬할때 무엇을 기준으로 할지 오버로딩 한다.
        if (x == b.x)  return y < b.y;
        return x < b.x;
    }
};

long long distance(Point a, Point b) {
    return pow(a.x - b.x, 2) + pow(a.y - b.y, 2);
}

bool compareY(Point a, Point b) {
    return a.y < b.y;
}

bool res_compere(Point a, Point b) {
    if (a.x == b.x) return a.y < b.y;

    return a.x < b.x;

}

vector<Point> l_st;
vector<Point> l_ed;

vector<Point> res1;
vector<Point> res2;

int cmp(vector<Point>& v, int start, int end, vector<Point>& st, vector<Point>& ed) {

    int min = 0;

    for (int i = start; i <= end - 1; i++) {
        for (int j = i + 1; j <= end; j++) {

            int dist = distance(v[i], v[j]);

            if (min == 0 || min > dist) {
                min = dist;

                //    cout << st[0].x <<" "<< st[0].y << "  " << ed[0].x <<" " << ed[0].y << "\n";
            }
        }
    }
    return min;
}


int closest(vector<Point>& v, int start, int end, vector<Point>& st, vector<Point>& ed) {
    int count = end - start + 1;

    if (count <= 3) // 2,3 개수 같이 하지않으면  x,y값 처리 어려움.
        return cmp(v, start, end, st, ed);

    int mid = (start + end) / 2; // mid 변수 생성 하지않으면 무한루프
    int left = closest(v, start, mid, st, ed);
     // left의 좌표 임시저장.
    int right = closest(v, mid + 1, end, st, ed);

    int minist;

    if (min(left, right) == right) {
        minist = right;


    }//작은 수 최소값으로 설정.
    else {
        minist = left;

    }
    // left가 작으면 left임시 저장 좌표를 가지고 있는다.

    vector<Point> boundary; //경계선 점 체크

    for (int i = start; i <= end; i++) {
        int xdistance = v[i].x - v[mid].x;

        if (min(xdistance * xdistance, minist) == xdistance * xdistance)    boundary.push_back(v[i]);
    }


    int bound_size = boundary.size();
    sort(boundary.begin(), boundary.end(), compareY);

    for (int i = 0; i < bound_size - 1; i++) {
        for (int j = i + 1; j < bound_size; j++) {

            int y = boundary[j].y - boundary[i].y;

            if (min(y * y, minist) == y * y) { // 
                int dist = distance(boundary[j], boundary[i]);

                if (min(dist, minist) == dist)minist = dist;
                st[0] = { boundary[i].x, boundary[i].y };
                ed[0] = { boundary[j].x, boundary[j].y };
            }
            else
                break;
        }
    }
    return minist;
}


int main() {
    int n;
    cin >> n;
    vector<Point> v(n);

    vector<Point> st(2);
    vector<Point> ed(2);


    vector<Point> res;

    for (int i = 0; i < n; i++)
        cin >> v[i].x >> v[i].y;

    sort(v.begin(), v.end());


    closest(v, 0, n - 1, st, ed);

    res.push_back({ st[0].x, st[0].y });
    res.push_back({ ed[0].x, ed[0].y });

    sort(res.begin(), res.end(), res_compere);

    cout << "(" << res[0].x <<", " << res[0].y << ") " << "(" << res[1].x << ", " << res[1].y << ")";

  //  for (auto a : res) cout << "(" << a.x << ", " << a.y << ") ";
  // cout << "\n";
  // cout << st[0].x << " " << st[0].y << "  " << ed[0].x << " " << ed[0].y << "\n";


}
