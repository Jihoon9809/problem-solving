#include <iostream>
#include <queue>
using namespace std;

int board[301][301];
int dx[8] = {1,1,2,2,-1,-1,-2,-2};
int dy[8] = {2,-2,1,-1,2,-2,1,-1};

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n, i, sx, sy, ex, ey;
	cin >> n;

	while (n--) {
		int max = 0;
		cin >> i >> sx >> sy >> ex >> ey;
		for (int j = 0; j < i; j++) {
			for (int k = 0; k < i; k++) {
				board[j][k] = -1;
			}
		}

		board[ex][ey] = -2;

		queue <pair<int, int>> q;
		if (sx == ex && sy == ey) {
			cout << 0 << "\n";
			continue;
		}
		q.push({ sx, sy });


		while (!q.empty()) {
			pair<int, int> cur = q.front();
			q.pop();

			for (int j = 0; j < 8; j++) {
				int nx = cur.first + dx[j];
				int ny = cur.second + dy[j];

				if (nx > i || nx <0 || ny >i || ny < 0) continue;
				if (board[nx][ny] > 0) continue;

				if (board[nx][ny] == -2) {
					max = board[cur.first][cur.second] + 1;	
					break;
				}

				if (max == 0) {
					q.push({ nx,ny });
					board[nx][ny] = board[cur.first][cur.second] + 1;
				}
			}
			if (max != 0) {
				break;
			}
		}
		cout << max+1 << "\n";
	}
	
}

///////////////////// 예제의 정답은 맞게 출력된다. 하지만 오답이다.
#include <iostream>
#include <queue>
using namespace std;

int board[301][301];
int dx[8] = {1,1,2,2,-1,-1,-2,-2};
int dy[8] = {2,-2,1,-1,2,-2,1,-1};

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	int n, i, sx, sy, ex, ey;
	cin >> n;

	while (n--) {
		int max = 0;
		cin >> i >> sx >> sy >> ex >> ey;
		
		for (int j = 0; j < i; j++) {
			for (int k = 0; k < i; k++) {
				board[j][k] = -1;
			}
		}
		board[sx][sy] = 0;

		queue <pair<int, int>> q;
		q.push({ sx, sy });


		while (!q.empty()) {
			pair<int, int> cur = q.front();
			q.pop();

			for (int j = 0; j < 8; j++) {
				int nx = cur.first + dx[j];
				int ny = cur.second + dy[j];

				if (nx >= i || nx <0 || ny >=i || ny < 0) continue;
				if (board[nx][ny] >= 0) continue;

				q.push({ nx,ny });
				board[nx][ny] = board[cur.first][cur.second] + 1;
			}
		}
		cout << board[ex][ey] << "\n";
	}
}
/////////////////////////////////// 
두번째 문제를 수정할때 board[ex][ey]의 값을 1로 주어 while문의 for문에서 1을 찾을 경우 출력을 하려 해ㅆ다.
하지만 if문을 추가하지 않아 계속하여 1이 출력되었다.
문제를 다시 푸는 중 board[ex][ey]값이 1로 되어 있어 while안의 for문의 if문에 걸려 board의 값을 바꾸지 않고 탈출하는 것을 발견하였다.
그리하여 문제를 수정하였다.
