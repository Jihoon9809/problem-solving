#include <iostream>
#include <queue>

using namespace std;

int board[1001][1001];
bool vis[1001][1001];
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };

int main() {
	int n, m, count =0;
	cin >> n >> m;

	queue <pair<int, int>> q;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> board[i][j];
			if (board[i][j] == 1) { // 최단거리를 구하는 문제이므로, 1을 입력받을 경우 시작위치를 queue에 저장을 한다. 1은 익은 토마토로 익은 토마토 주변의 토마토들이 동시에 자라기 때문이다.
				q.push({ i,j });
				vis[i][j] = 1;
			}
			//if (board[i][j] == 1) cout << q.back().first << q.back().second << "\n";
		}
	}

	
	while (!q.empty()) {
		pair<int, int> cur = q.front();
		q.pop();
		for (int i = 0; i < 4; i++) {
			int nx = dx[i] + cur.first;
			int ny = dy[i] + cur.second;
			if (nx >= n || nx < 0 || ny >= m || ny < 0) {
				//cout << 1 << "\n";
				continue;
			}
			if (board[nx][ny] != 0 || vis[nx][ny]) {
				//cout << 2 << "\n";
				continue;
			}
			q.push({ nx,ny });
			vis[nx][ny] = 1;
			//cout << "들어옴";
		}
		count++;
	}
	cout << count;
}
/////////////// 거리를 계산하는 문제이므로 bool값이 아닌 int로 하여 크기를 계산하여야 한다.
////////////// 문제를 정확히 확인하지 않아 n, m 을 거꾸로 입력받음.
/////////////////////////////////////////////////////////////////


#include <iostream>
#include <queue>

using namespace std;

int board[1001][1001];
int vis[1001][1001] ;
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };

int main() {
	int n, m, max=0;
	cin >> m >> n;

	queue <pair<int, int>> q;

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			cin >> board[i][j];
			if (board[i][j] == 1) {
				q.push({ i,j });
			}
			if (board[i][j] == 0) {
				vis[i][j] = -1;
			}
			//if (board[i][j] == 1) cout << q.back().first << q.back().second << "\n";
		}
	}

	
	while (!q.empty()) {
		pair<int, int> cur = q.front();
		q.pop();
		if (max < vis[cur.first][cur.second]) max = vis[cur.first][cur.second];

		for (int i = 0; i < 4; i++) {
			int nx = dx[i] + cur.first;
			int ny = dy[i] + cur.second;
			if (nx >= n || nx < 0 || ny >= m || ny < 0) {
				//cout << 1 << "\n";
				continue;
			}
			if (vis[nx][ny] >= 0) {
				//cout << 2 << "\n";
				continue;
			}
			q.push({ nx,ny });
			vis[nx][ny] = vis[cur.first][cur.second] + 1;
			//cout << vis[nx][ny] << " ";
			//cout << "들어옴";
		}
	}
		for (int i = 0; i < n; i++) { //////// board[][]의 값이 0일때 -1로 변환 하였으므로 만약 board값이 -1인 칸으로 덥혀있는 0이 있다면 vis는 -1로 존재하므로 -1 출력
			for (int j = 0; j < m; j++) {
				if (vis[i][j] == -1) {
					cout << -1;
					return 0;
			}
		}
	}
	cout << max;
}
