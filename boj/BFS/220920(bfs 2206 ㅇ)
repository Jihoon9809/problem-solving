#include <iostream>
#include <queue>
#include <string>
#include <tuple>

using namespace std;

string board[1001];
int vist[1001][1001][2];
int dx[4] = { 1,0,-1,0 };
int dy[4] = { 0,1,0,-1 };
int n, m;

int bfs() {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			vist[i][j][0] = vist[i][j][1] = -1; // vist[][][0] vist[][][1]을 한번에 초기화 할 수 있다.
		}
	}

	queue<tuple<int, int, int>> q;
	q.push({ 0,0,0 });
	vist[0][0][0] = vist[0][0][1] = 1;

	while (!q.empty()) {
		int x, y, broken ;
		tie(x, y, broken) = q.front();
		if (x == n - 1 && y == m - 1) {
			return vist[x][y][broken];
		}
		q.pop();

		for (int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (nx >= n || ny >= m || nx < 0 || ny < 0) continue;
			if (board[nx][ny] == '1' && !broken && vist[nx][ny][1] == -1) {
				vist[nx][ny][1] = vist[x][y][broken] + 1;
				q.push({ nx,ny,1 });
			}
			if (board[nx][ny] == '0' && vist[nx][ny][broken] == -1) {
				vist[nx][ny][broken] = vist[x][y][broken] + 1;
				q.push({ nx,ny,broken });
			}
		}
	}
	return -1;
}

int main() {
	cin >> n >> m;

	for (int i = 0; i < n; i++) {
		cin >> board[i];
	}
	cout << bfs();
}


/// 벽이 막혀있을 때와 막혀있지 않을때를 나누어 계산하였다.
