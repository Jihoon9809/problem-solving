#include <iostream>
#include <algorithm>

using namespace std;

int arr[1000001];

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);

	int n;
	cin >> n;

	arr[1] = 0;

	for (int i = 2; i <= n; i++) {
		arr[i] = arr[i - 1] + 1;
		if (i % 2 == 0) arr[i] = min(arr[i],arr[i / 2] + 1);
		if (i % 3 == 0) arr[i] = min(arr[i], arr[i / 3] + 1);
	}

	cout << arr[n];
}

테이블 정의 : D[i] = i 를 1로 만들기 위한 연산사용의 최소값 구하기.
점화식 : D[i] = D[i-1]+1
         D[i] = D[i/2]+1
         D[i] = D[i/3]=1
         D[1]=0
         -->D[12] = D[i-1]+1 , D[i/2]+1, D[i/3]+1 세가지 값을 모두 비교하여 가장 작은 값을 출력하면 된다.
         D[11]+1, D[6]+1, D[4]+1 이므로 2부터 12까지 반복문을 통하여 계속하여 값을 저장하므로 해당 배열의 원소값+1이 된다.
         따라서 최소값을 구할 수 있다.
	 
++ 12의 경우 3 과 2로 나눌 수 있다. 3으로 나눌 경우 4 // 2로 나눌 경우 6이다.

즉 D[12] = D[4]+1 (여기서 + 1은 3으로 나눌때의 연산이다) -- > D[4]의 경우 2혹은 3으로 나눌 수 있다. --> D[2]+1 // D[3]+1 따라서 D[4]의 값은 2이다.
--> 2+1로 D[12]의 값은 3이 됨을 알 수 있다.
