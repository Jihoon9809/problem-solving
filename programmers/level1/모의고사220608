import java.util.ArrayList;
import java.lang.Math;

class Solution {
    public int[] solution(int[] answers) {
        ArrayList<Integer> score = new ArrayList<Integer>();
        
        int[] first = new int[answers.length];
        int[] second = new int[answers.length];
        int[] third = new int[answers.length];
        
        int[] count = {0,0,0};
        
        int[] first_number = {1,2,3,4,5};
        int[] second_number = {2,1,2,3,2,4,2,5};
        int[] third_number = {3,3,1,1,2,2,4,4,5,5};
        
        
        for(int i = 0 ; i < answers.length;i++){
            first[i] = first_number[i%5];
        }
        
        for(int i = 0; i<answers.length;i++){
                second[i] = second_number[i%8];
        }
        
        for(int i = 1 ; i<answers.length;i++){
            third[i] = third_number[i%10];
        }
        
        for(int i=0;i<answers.length;i++){
            if(first[i] == answers[i]) count[0]++;
        }
        
        
        for(int i=0;i<answers.length;i++){
            if(second[i] == answers[i]) count[1]++;
        }
        
        
        for(int i=0;i<answers.length;i++){
            if(third[i] == answers[i]) count[2]++;
        }
        
        if(count[0]==count[1] && count[1] == count[2]){
            count[0] =1;
            count[1] =2;
            count[2] =3;
        }
        //1 or 1,3
        else if(count[0]>count[1]){
            count[1] = 0;
            if(count[0]>count[2]) {
                count[2] = 0;
                count[0] = 1;
        }
            else if(count[0] == count[3]){
                count[0] = 1;
                count[2] = 3;
            }
            else if(count[0] <count[2]){
                count[2]=3;
                count[0]=0;
            } 
        }
        // 2 or 1,2
        else if(count[1]>count[2]){
            count[2] = 0;
            if(count[1]>count[0]) {
                count[0] = 0;
                count[1] = 2;
        }
            else if(count[1] == count[0]){
                count[0] = 1;
                count[1] = 2;
            }
            else if(count[1] < count[0]){
                count[0]=1;
                count[1] =0;
            } 
        }
        else if(count[2]>count[0]){
            count[0] = 0;
            if(count[2]>count[1]) {
                count[1] = 0;
                count[2] = 3;
        }
            else if(count[2] == count[1]){
                count[1] = 2;
                count[2] = 3;
            }
            else if(count[2] < count[1]){
                count[2] = 0;
                count[1] = 2;
            } 
        }
        
        
        for(int i=0;i<count.length;i++){
            if(count[i] != 0) score.add(count[i]);
        }
        
        int[] answer = new int[score.size()];
        for(int i =0;i<score.size();i++) {
            answer[i]=count[i];
        }

        return answer;
    }
}
// 런타임 에러 불필요한 부분을 줄였다.
// count배열 하나하나 비교하며 가장 큰수를 찾으려 했다.
// 또한 count가 0일 경우 answer배열에 복사 하지 않도록 하였다.
// 불필요하게 반복되는 문장이 많은 것을 확인하였다.


import java.util.ArrayList;
import java.lang.Math;

class Solution {
    public int[] solution(int[] answers) {
        ArrayList<Integer> score = new ArrayList<Integer>();
                
        int[] count = {0,0,0};
        
        int[] first_number = {1,2,3,4,5};
        int[] second_number = {2,1,2,3,2,4,2,5};
        int[] third_number = {3,3,1,1,2,2,4,4,5,5};
        
        
        for(int i=0;i<answers.length;i++)       if(first_number[i%first_number.length] == answers[i]) count[0]++;
        
        for(int i=0;i<answers.length;i++)       if(second_number[i%second_number.length] == answers[i]) count[1]++;
        
        for(int i=0;i<answers.length;i++)       if(third_number[i%third_number.length] == answers[i]) count[2]++;
        
        int max_count = Math.max(count[0],Math.max(count[1],count[2]));
        
        if(max_count == count[0]) score.add(1);
        if(max_count == count[1]) score.add(2);
        if(max_count == count[2]) score.add(3);
        
        int[] answer = new int[score.size()];
        for(int i =0;i<score.size();i++) {
            answer[i]=score.get(i);
        }

        return answer;
    }
}
// 첫 번째 풀이의 경우 first 배열을 만든 후 answers 크기 만큼 배열을 만들었지만
// 해당 풀이의 경우 저장하지 않고 바로 비교를 하여 count배열을 증가시켰다. 
// 가장 큰 수를 찾은 후 같은지 비교를 하였다.
// 이후 ArrayList에 가장 큰 수와 같은 값을 삽입 하였다.

//220608
