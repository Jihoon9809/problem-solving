
#include<iostream>
#include <queue>

using namespace std;

int arr[16][16];
int c_vis[16][16];
int r_vis[16][16];

int main(int argc, char** argv)
{
	int test_case;
	int T;
    
	cin>>T;

	for(test_case = 1; test_case <= T; ++test_case)
	{
        int n, m, row = 0, col = 0;
		cin >> n >> m;

		queue<pair<int, int>> q;

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				cin >> arr[i][j];

				if (arr[i][j] == 1) {
					q.push({ i,j });
					r_vis[i][j] = 1;
					c_vis[i][j] = 1;
				}

			}
		}

		while (!q.empty()) {

			pair<int, int> cur = q.front();
			q.pop();

			int ny = cur.second + 1;
			int nx = cur.first + 1;

			
			if (arr[cur.first][cur.second] == 0) continue;
			//if (ny >= n || ny < 0) continue;
			if (arr[cur.first][ny] == 1 && r_vis[cur.first][ny] != 0)
				r_vis[cur.first][ny] = r_vis[cur.first][cur.second] + 1;

			//if (nx >= n || nx < 0) continue;
			if (arr[nx][cur.second] == 1 && c_vis[nx][cur.second] != 0)
				c_vis[nx][cur.second] = c_vis[cur.first][cur.second] + 1;
		}


		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (r_vis[i][j] == m) row++;
				else if (r_vis[i][j] == m+1) row--;
				if (c_vis[i][j] == m) col++;
				else if (c_vis[i][j] == m+1) col--;
				r_vis[i][j] = c_vis[i][j] = 0;
			}
		}
		
		cout << "#"<<test_case << " " << row + col<<"\n";
	
	}
	return 0;//정상종료시 반드시 0을 리턴해야합니다.
}

/////// 처음 문제를 봤을때 BFS로 풀려 하였다. 실패.
/////// 각 행에 대하여 열전체를 체크하고 각 열에대하여 행전체를 체크하는 방식으로 진행.
현재 위치의 배열이 1의 값이라면 다음 칸의 값을 확인한다. 만약 다음칸 값도 1이라면 다음칸 값을 현재칸 +1을 해준다.
위의 방법을 계속 진행한다.

이후 c_vis (cols_visit) + r_vis(row_visit)를 모두 돌며 처음 입력받았던 m의 값과 일치하는 값을 찾으면 col, row를 증가시킨다.
m+1 즉 m이 딱 떨어지지 않는 연속되는 칸은 문제의 요구사항이 아니므로 col,row를 감소시킨다.
정확히 3만큼 이어진 row, col의 개수를 더해준다.

싸피 대비로 첫 문제를 풀었다. 문제를 생각하는 것에는 시간이 오래 걸리지 않았지만, 오류를 해결함에 있어 오래 걸렸다.
